The files provided along with this README are part of the Smart Card Detective (SCD).
The SCD is meant to provide an open framework for EMV research, enabling users to
analyze transactions. The software is given under the GPL v3 license (see file
gpl-3.0.txt). The rights of this code or its license can be modified in future
versions.

VERSION
Current version of the software is 2.3.3.
Last updated: 19 April 2011.

REQUIREMENTS
In order to compile this project you need the avr-libc and avr-gcc tools.
Please use avr-libc version 1.7.0 or higher as the previous versions have problems
with the malloc functions. See http://www.nongnu.org/avr-libc/ for more information.

I recommend using my script (for any linux distribution) to install all the
necessary tools and the correct versions:
http://www.cl.cam.ac.uk/~osc22/files/install_avr_tools.sh
(please see the comments at the start of the script for additional requirements)

Alternatively you can use your distro installation of avr tools but make sure
you are using the required avr-libc version (1.7.0).

On Windows you can try using WinAVR and/or AVR Studio. However if you want to
build and debug the project I highly recommend working under Unix.


BUILD
Compile the project using the command "make all"

In order to program via JTAG or USB without root access you must create the following
rule files under /etc/udev/rules.d (ubuntu, probably similar on other distros):

45-atmel.rules:
    ATTRS{idVendor}=="03eb", ATTRS{idProduct}=="2103", MODE="0660", GROUP="plugdev"
    ATTRS{idVendor}=="03eb", ATTRS{idProduct}=="2107", MODE="0660", GROUP="plugdev"

98-lufa-virtualserial.rules:
    SUBSYSTEM=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="204b", MODE="660", GROUP="plugdev"
    BUS=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="204b", MODE="660", GROUP="plugdev"

    SUBSYSTEM=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="2044", MODE="660", GROUP="plugdev"
    BUS=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="2044", MODE="660", GROUP="plugdev"

    SUBSYSTEM=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="204f", MODE="660", GROUP="plugdev"
    BUS=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="204f", MODE="660", GROUP="plugdev"

    SUBSYSTEM=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="206f", MODE="660", GROUP="plugdev"
    BUS=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="206f", MODE="660", GROUP="plugdev"

99-dfu_programmer.rules:
    BUS=="usb", ACTION=="add", SYSFS{idVendor}=="03eb", SYSFS{idProduct}=="*", MODE="666", GROUP="root"

DEBUG/PROGRAM
I recommend using an AVR Dragon for programming and debugging of your chip. Use
avrdude to program your chip. 

Use the following commands to program:
    "make program-dragon": program the SCD using avrdude and the AVR Dragon.
    "make program-dragon-dfu": similar to "program-dragon" but include the bootloader so that you can later program the SCD via USB.
    "make program-dfu": program the SCD via USB using dfu-programmer (you need the bootloader preinstalled on the SCD).

Use the following commands to debug:
    "make avarice": allow debugging of the application using the SCD and AVR Dragon (next use "make debug").
    "make debug": connect avr-gdb to avarice (once avarice is running).
    "make debug-insight": similar to "make debug" but using the INSIGHT interface of GDB.

SET FUSES
For the first time using the board you might need to set up the fuses for correct operation of the SCD.
This can be done easily typing the following command:
    "make set-dragon-fuses"
as the name suggests, you need to use the AVR Dragon or similar JTAG programmer.

DOCUMENTATION
You can find the documentation in HTML format for the source code in the doc/ folder.
Point your browser to the doc/html/index.html file.

For more information about the software and how to get the SCD check the forum of the Smart Card Detective at:
http://www.smartcarddetective.com/forum/

Copyright (C) Omar Choudary (osc22@cam.ac.uk)
http://cl.cam.ac.uk/~osc22/scd/

